plugins {
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.6'
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom("org.springframework.boot:spring-boot-starter-parent:3.1.5")
    }
}

dependencies {
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'com.ninja-squad:DbSetup:2.1.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.microsoft.sqlserver:mssql-jdbc:12.8.0.jre11'
    implementation 'org.parboiled:parboiled-java:1.4.1'
    implementation 'io.github.furstenheim:copy_down:1.1'
    implementation 'com.youbenzi:MDTool:1.2.4'
    implementation 'com.vladsch.flexmark:flexmark-html2md-converter:0.64.0'
}

configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

task copyFrontend {
    mustRunAfter(':frontend:assemble')

    String outputDir = 'src/main/resources/public'
    doFirst {
        String outputPath = project.rootDir.absolutePath + '/' + outputDir
        if (new File(outputPath).isDirectory()) {
            delete(outputPath)
        }
    }
    doLast {
        copy {
            from(project(':frontend').projectDir.absolutePath + '/dist/spa') {
                include 'assets/'
                include 'icons/'
                include 'index.html'
                include 'favicon.ico'
            }
            into outputDir
        }
    }
}

configure(copyFrontend) {
    group = 'build'
    description = 'copies over frontend files'
}

processResources.dependsOn(copyFrontend)