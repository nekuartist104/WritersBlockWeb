import{X as d}from"./index.08ad63da.js";import{httpClient as e}from"./axios.b75ae6bc.js";const c=d("area",{state:()=>({area:{},locations:[],areaTypes:[],areas:[]}),actions:{async loadAreaById(t){const a=await e.get("/getAreaById?areaId="+t),s=await e.get("/getAreaTypeById?areaTypeId="+a.data.areaTypeId),r=await e.get("getLocationById?locationId="+a.data.locationId),i=await e.get("getWorldById?worldId="+r.data.worldId),o=a.data;o.areaType=s.data,o.location=r.data,o.location.world=i.data,this.area=o},async createArea(){await e.post("/createArea",this.area)},async updateArea(){this.area.locationId=this.area.location.locationId,this.area.areaTypeId=this.area.areaType.areaTypeId,await e.post("/updateArea",this.area)},async deleteArea(){this.area.locationId=this.area.location.locationId,this.area.areaTypeId=this.area.areaType.areaTypeId,await e.delete("/deleteArea?areaId="+this.area.areaId),this.areas.splice(this.areas.findIndex(t=>t.areaId===this.area.areaId),1),this.areas.length>0?await this.loadAreaById(this.areas[this.areas.length-1].areaId):this.area={}},async getAllAreaTypes(){const t=await e.get("/getAreaTypes");this.areaTypes=t.data},async getAllLocations(){const t=await e.get("/getAllLocations");this.locations=t.data;for(const a of this.locations){const s=await e.get("getWorldById?worldId="+a.worldId);a.world=s.data}},async getAllAreas(){const t=await e.get("/getAllAreas");this.areas=t.data;for(const a of this.areas){for(const s of this.locations)if(s.locationId===a.locationId){a.location=s;break}for(const s of this.areaTypes)if(s.areaTypeId===a.areaTypeId){a.areaType=s;break}}await this.loadAreaById(this.areas[0].areaId)}}});export{c as u};
