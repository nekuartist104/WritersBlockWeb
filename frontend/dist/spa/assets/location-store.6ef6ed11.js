import{X as s}from"./index.08ad63da.js";import{httpClient as t}from"./axios.b75ae6bc.js";const c=s("location",{state:()=>({location:{},worlds:[],locations:[]}),actions:{async loadLocationById(o){const a=await t.get("/getLocationById?locationId="+o),i=await t.get("/getWorldById?worldId="+a.data.worldId);this.location=a.data,this.location.world=i.data},async createLocation(){await t.post("/createLocation",this.location)},async updateLocation(){this.location.worldId=this.location.world.worldId,await t.post("/updateLocation",this.location)},async deleteLocation(){this.location.worldId=this.location.world.worldId,await t.delete("/deleteLocation?locationId="+this.location.locationId),this.locations.splice(this.locations.findIndex(o=>o.locationId===this.location.locationId),1),this.locations.length>0?this.loadLocationById(this.locations[this.locations.length-1].locationId):this.location={}},async getAllWorlds(){const o=await t.get("/getWorlds");this.worlds=o.data},async getAllLocations(){const o=await t.get("/getAllLocations");this.locations=o.data;for(const a of this.locations)for(const i of this.worlds)if(i.worldId===a.worldId){a.world=i;break}this.location=this.locations[0],this.loadLocationById(this.location.locationId)}}});export{c as u};
